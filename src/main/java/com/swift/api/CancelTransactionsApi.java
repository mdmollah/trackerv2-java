/*
 * Tracker API v2
 * Move your app forward with the gpi API
 *
 */
package com.swift.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.swift.ApiCallback;
import com.swift.ApiClient;
import com.swift.ApiException;
import com.swift.ApiResponse;
import com.swift.Configuration;
import com.swift.Pair;
import com.swift.ProgressRequestBody;
import com.swift.ProgressResponseBody;
import com.swift.model.CamtA0600102;
import com.swift.model.CamtA0600202;

public class CancelTransactionsApi {
    private ApiClient apiClient;

    public CancelTransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CancelTransactionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelTransactionsPost
     * @param laUApplicationID ID that identifies the application generationg the API and used by the gpi Connector to retrieve the related LAU keys (required)
     * @param laUVersion version of the LAUSigned header. Mandatory. \&quot;1.0\&quot; for this first release (required)
     * @param laUCallTime timestamp in UTC of the API call in the format YYYY-MM-DDTHH:MM:SS.sssZ (required)
     * @param laURequestNonce a random value generated by the client. Provided with the request and copied by the gpi Connector on the response (required)
     * @param laUSigned service specific HTTP headers (required)
     * @param laUSignature contains the LAU signature, base64 ecoded (required)
     * @param signatureRequired a field indicating that a Signature is required (required)
     * @param xApiKey An API key given to your application to authenticate against the sandbox URL (required)
     * @param requestBody Cancel Transaction Request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelTransactionsPostCall(String laUApplicationID, String laUVersion, String laUCallTime, String laURequestNonce, String laUSigned, String laUSignature, Boolean signatureRequired, String xApiKey, CamtA0600102 requestBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/cancel_transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (laUApplicationID != null)
        localVarHeaderParams.put("LAUApplicationID", apiClient.parameterToString(laUApplicationID));
        if (laUVersion != null)
        localVarHeaderParams.put("LAUVersion", apiClient.parameterToString(laUVersion));
        if (laUCallTime != null)
        localVarHeaderParams.put("LAUCallTime", apiClient.parameterToString(laUCallTime));
        if (laURequestNonce != null)
        localVarHeaderParams.put("LAURequestNonce", apiClient.parameterToString(laURequestNonce));
        if (laUSigned != null)
        localVarHeaderParams.put("LAUSigned", apiClient.parameterToString(laUSigned));
        if (laUSignature != null)
        localVarHeaderParams.put("LAUSignature", apiClient.parameterToString(laUSignature));
        if (signatureRequired != null)
        localVarHeaderParams.put("SignatureRequired", apiClient.parameterToString(signatureRequired));
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelTransactionsPostValidateBeforeCall(String laUApplicationID, String laUVersion, String laUCallTime, String laURequestNonce, String laUSigned, String laUSignature, Boolean signatureRequired, String xApiKey, CamtA0600102 requestBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'laUApplicationID' is set
        if (laUApplicationID == null) {
            throw new ApiException("Missing the required parameter 'laUApplicationID' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'laUVersion' is set
        if (laUVersion == null) {
            throw new ApiException("Missing the required parameter 'laUVersion' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'laUCallTime' is set
        if (laUCallTime == null) {
            throw new ApiException("Missing the required parameter 'laUCallTime' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'laURequestNonce' is set
        if (laURequestNonce == null) {
            throw new ApiException("Missing the required parameter 'laURequestNonce' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'laUSigned' is set
        if (laUSigned == null) {
            throw new ApiException("Missing the required parameter 'laUSigned' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'laUSignature' is set
        if (laUSignature == null) {
            throw new ApiException("Missing the required parameter 'laUSignature' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'signatureRequired' is set
        if (signatureRequired == null) {
            throw new ApiException("Missing the required parameter 'signatureRequired' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling cancelTransactionsPost(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling cancelTransactionsPost(Async)");
        }


        com.squareup.okhttp.Call call = cancelTransactionsPostCall(laUApplicationID, laUVersion, laUCallTime, laURequestNonce, laUSigned, laUSignature, signatureRequired, xApiKey, requestBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel Transactions
     * This API informs the tracker about the cancellation of a given transaction
     * @param laUApplicationID ID that identifies the application generationg the API and used by the gpi Connector to retrieve the related LAU keys (required)
     * @param laUVersion version of the LAUSigned header. Mandatory. \&quot;1.0\&quot; for this first release (required)
     * @param laUCallTime timestamp in UTC of the API call in the format YYYY-MM-DDTHH:MM:SS.sssZ (required)
     * @param laURequestNonce a random value generated by the client. Provided with the request and copied by the gpi Connector on the response (required)
     * @param laUSigned service specific HTTP headers (required)
     * @param laUSignature contains the LAU signature, base64 ecoded (required)
     * @param signatureRequired a field indicating that a Signature is required (required)
     * @param xApiKey An API key given to your application to authenticate against the sandbox URL (required)
     * @param requestBody Cancel Transaction Request (required)
     * @return CamtA0600202
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CamtA0600202 cancelTransactionsPost(String laUApplicationID, String laUVersion, String laUCallTime, String laURequestNonce, String laUSigned, String laUSignature, Boolean signatureRequired, String xApiKey, CamtA0600102 requestBody) throws ApiException {
        ApiResponse<CamtA0600202> resp = cancelTransactionsPostWithHttpInfo(laUApplicationID, laUVersion, laUCallTime, laURequestNonce, laUSigned, laUSignature, signatureRequired, xApiKey, requestBody);
        return resp.getData();
    }

    /**
     * Cancel Transactions
     * This API informs the tracker about the cancellation of a given transaction
     * @param laUApplicationID ID that identifies the application generationg the API and used by the gpi Connector to retrieve the related LAU keys (required)
     * @param laUVersion version of the LAUSigned header. Mandatory. \&quot;1.0\&quot; for this first release (required)
     * @param laUCallTime timestamp in UTC of the API call in the format YYYY-MM-DDTHH:MM:SS.sssZ (required)
     * @param laURequestNonce a random value generated by the client. Provided with the request and copied by the gpi Connector on the response (required)
     * @param laUSigned service specific HTTP headers (required)
     * @param laUSignature contains the LAU signature, base64 ecoded (required)
     * @param signatureRequired a field indicating that a Signature is required (required)
     * @param xApiKey An API key given to your application to authenticate against the sandbox URL (required)
     * @param requestBody Cancel Transaction Request (required)
     * @return ApiResponse&lt;CamtA0600202&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CamtA0600202> cancelTransactionsPostWithHttpInfo(String laUApplicationID, String laUVersion, String laUCallTime, String laURequestNonce, String laUSigned, String laUSignature, Boolean signatureRequired, String xApiKey, CamtA0600102 requestBody) throws ApiException {
        com.squareup.okhttp.Call call = cancelTransactionsPostValidateBeforeCall(laUApplicationID, laUVersion, laUCallTime, laURequestNonce, laUSigned, laUSignature, signatureRequired, xApiKey, requestBody, null, null);
        Type localVarReturnType = new TypeToken<CamtA0600202>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Transactions (asynchronously)
     * This API informs the tracker about the cancellation of a given transaction
     * @param laUApplicationID ID that identifies the application generationg the API and used by the gpi Connector to retrieve the related LAU keys (required)
     * @param laUVersion version of the LAUSigned header. Mandatory. \&quot;1.0\&quot; for this first release (required)
     * @param laUCallTime timestamp in UTC of the API call in the format YYYY-MM-DDTHH:MM:SS.sssZ (required)
     * @param laURequestNonce a random value generated by the client. Provided with the request and copied by the gpi Connector on the response (required)
     * @param laUSigned service specific HTTP headers (required)
     * @param laUSignature contains the LAU signature, base64 ecoded (required)
     * @param signatureRequired a field indicating that a Signature is required (required)
     * @param xApiKey An API key given to your application to authenticate against the sandbox URL (required)
     * @param requestBody Cancel Transaction Request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelTransactionsPostAsync(String laUApplicationID, String laUVersion, String laUCallTime, String laURequestNonce, String laUSigned, String laUSignature, Boolean signatureRequired, String xApiKey, CamtA0600102 requestBody, final ApiCallback<CamtA0600202> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelTransactionsPostValidateBeforeCall(laUApplicationID, laUVersion, laUCallTime, laURequestNonce, laUSigned, laUSignature, signatureRequired, xApiKey, requestBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CamtA0600202>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
